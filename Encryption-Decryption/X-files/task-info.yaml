type: edu
custom_name: stage5
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.io.PrintWriter;
    import java.util.Scanner;

    public class Main {

        private static String encryption(String str, int n) {
            StringBuilder stringBuilder = new StringBuilder();

            for (int i = 0; i < str.length(); i++) {
                char ch = (char) (str.charAt(i) + n);
                stringBuilder.append(ch);

            }
            return stringBuilder.toString();
        }

        private static String decryption(String str, int n) {
            StringBuilder stringBuilder = new StringBuilder();

            for (int i = 0; i < str.length(); i++) {
                char ch = (char) (str.charAt(i) - n);
                stringBuilder.append(ch);
            }
            return stringBuilder.toString();
        }

        private static void save(String filename, String encFile) {
            try (PrintWriter printWriter = new PrintWriter(filename)) {
                printWriter.println(encFile);
            } catch (Exception e) {
                System.out.println("Error");
            }
        }

        private static String load(String filename) {
            String str = "";
            try (Scanner scanner = new Scanner(filename)) {
                if (scanner.hasNextLine()) {
                    str = scanner.nextLine();
                }
                return str;
            } catch (Exception e) {
                System.out.println("Error");
            }
            return str;
        }

        public static void main(String[] args) {
            String action = "enc";
            String str = "";
            int key = 0;
            String filenameOut = "";
            String filenameIn = "";

            for (int i = 0; i < args.length; i++) {
                switch (args[i]) {
                    case "-mode":
                        action = args[i + 1];
                        break;
                    case "-key":
                        key = Integer.parseInt(args[i + 1]);
                        break;
                    case "-data":
                        str = args[i + 1];
                        break;
                    case "-out":
                        filenameOut = args[i + 1];
                        break;
                    case "-in":
                        filenameIn = args[i + 1];
                        break;
                }
            }

            switch (action) {
                case "enc":
                    if (!filenameIn.isEmpty()) {
                        str = load(filenameIn);
                    }
                    String encWord = encryption(str, key);
                    if (filenameOut.isEmpty()) {
                        System.out.println(encWord);
                    } else {
                        save(filenameOut, encWord);
                    }
                    break;
                case "dec":
                    if (!filenameIn.isEmpty()) {
                        str = load(filenameIn);
                    }
                    String decWord = decryption(str, key);
                    if (filenameOut.isEmpty()) {
                        System.out.println(decWord);
                    } else {
                        save(filenameOut, decWord);
                    }
                    break;
            }
        }
    }
  learner_created: true
- name: output.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/249/implement
status: Solved
record: 4
